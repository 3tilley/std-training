use anyhow::Result;
use core::str;
use embedded_svc::{http::Method, io::Write};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::{
        i2c::{I2cConfig, I2cDriver},
        prelude::*,
    },
    http::server::{Configuration, EspHttpServer},
};
use shtcx::{self, shtc3, PowerMode};
use std::{
    sync::{Arc, Mutex},
    thread::sleep,
    time::Duration,
};
use embedded_svc::http::server::HandlerResult;
use wifi::wifi;
use serde::Serialize;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

#[derive(Serialize)]
struct SensorData {
    temperature: f32,
    humidity: f32,
}

fn main() -> Result<()> {
    esp_idf_svc::sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    // Initialize temperature sensor
    let sda = peripherals.pins.gpio10;
    let scl = peripherals.pins.gpio8;
    let i2c = peripherals.i2c0;
    let config = I2cConfig::new().baudrate(100.kHz().into());
    let i2c = I2cDriver::new(i2c, sda, scl, &config)?;
    let temp_sensor_main = Arc::new(Mutex::new(shtc3(i2c)));
    let mut temp_sensor = temp_sensor_main.clone();
    temp_sensor
        .lock()
        .unwrap()
        .start_measurement(PowerMode::NormalMode)
        .unwrap();

    // 1.Create a `EspHttpServer` instance using a default configuration
    let configuration = Configuration::default();
    let mut server = EspHttpServer::new(&configuration)?;

    // 2. Write a handler that returns the index page
    server.fn_handler("/", Method::Get, |request| {
        let html = index_html();
        let mut resp = request.into_ok_response()?;
        resp.write(html.as_bytes())?;
        Ok(())
    })?;

    server.fn_handler("/sensors", Method::Get, |request| {

        let mut temp_sensor = temp_sensor_main.clone();
        temp_sensor
            .lock()
            .unwrap()
            .start_measurement(PowerMode::NormalMode)
            .unwrap();
        let res = temp_sensor.lock().unwrap().get_measurement_result()?;
        let data = SensorData {
            temperature: res.temperature.as_degrees_celsius(),
            humidity: res.humidity.as_percent(),
        };
        let json_data = serde_json::to_string(&data).unwrap();
        let mut resp = request.into_ok_response()?;
        resp.write(json_data.as_bytes())?;
        Ok(())

    })?;

    // This is not true until you actually create one
    let ip_res = _wifi.sta_netif();
    println!("Server awaiting connection on:\nIP {}\nHost {}\n{:?}", ip_res.get_ip_info()?.ip, ip_res.get_hostname()?, ip_res );

    // Prevent program from exiting
    loop {
        sleep(Duration::from_millis(1000));
    }
}

fn templated(content: impl AsRef<str>) -> String {
    format!(
        r#"
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>esp-rs web server</title>
    </head>
    <body>
        {}
    </body>
</html>
"#,
        content.as_ref()
    )
}

fn index_html() -> String {
    templated("Hello from mcu!")
}

fn temperature(val: f32) -> String {
    templated(format!("chip temperature: {:.2}Â°C", val))
}
